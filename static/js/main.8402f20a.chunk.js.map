{"version":3,"sources":["MicroFrontend.js","App.js","serviceWorker.js","index.js"],"names":["MicroFrontend","renderMicroFrontend","props","name","window","history","this","host","document","scriptId","getElementById","fetch","then","res","json","manifest","script","createElement","id","crossOrigin","src","onload","head","appendChild","React","Component","defaultProps","CreateReactApp","process","MicroFrontend2","MicroFrontend3","Home","App","to","path","component","render","Boolean","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gRAEMA,E,4MA4BJC,oBAAsB,WACpB,MAAkC,EAAKC,MAA/BC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OAAQC,EAAtB,EAAsBA,QAEtBD,EAAO,SAAD,OAAUD,KAAWC,EAAO,SAAD,OAAUD,IAAhB,UAA2BA,EAA3B,cAA6CE,I,uDA9B1E,WAAqB,IAAD,OAClB,EAAiCC,KAAKJ,MAA9BC,EAAR,EAAQA,KAAMI,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,SACdC,EAAQ,gCAA4BN,GAEtCK,EAASE,eAAeD,GAC1BH,KAAKL,sBAIPU,MAAM,GAAD,OAAIJ,EAAJ,yBACFK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,IAAMC,EAASR,EAASS,cAAc,UACtCD,EAAOE,GAAKT,EACZO,EAAOG,YAAc,GACrBH,EAAOI,IAAP,UAAgBb,GAAhB,OAAuBQ,EAAQ,MAAU,YACzCC,EAAOK,OAAS,EAAKpB,oBACrBO,EAASc,KAAKC,YAAYP,Q,kCAIhC,WACE,MAAyBV,KAAKJ,MAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OAEdA,EAAO,UAAD,OAAWD,KAAWC,EAAO,UAAD,OAAWD,IAAjB,UAA4BA,EAA5B,iB,oBAS9B,WACE,OAAO,0BAAMe,GAAE,UAAKZ,KAAKJ,MAAMC,KAAhB,oB,GAnCSqB,IAAMC,WAuClCzB,EAAc0B,aAAe,CAC3BlB,kBACAJ,eAGaJ,QCtCT2B,EAAiB,SAAC,GAAD,IAAGtB,EAAH,EAAGA,QAAH,OACrB,kBAAC,EAAD,CACEA,QAASA,EACTE,KAP0DqB,mCAQ1DzB,KAAK,oBAIH0B,EAAiB,SAAC,GAAD,IAAGxB,EAAH,EAAGA,QAAH,OACrB,kBAAC,EAAD,CACEA,QAASA,EACTE,KAduDqB,wBAevDzB,KAAK,qBAIH2B,EAAiB,SAAC,GAAD,IAAGzB,EAAH,EAAGA,QAAH,OACrB,kBAAC,EAAD,CACEA,QAASA,EACTE,KArBuDqB,wBAsBvDzB,KAAK,qBAIH4B,EAAO,kBACX,oCACE,qOAKA,qPAKA,qMAKA,mQAkDWC,EAzCH,SAAA9B,GACV,OACE,kBAAC,IAAD,KACE,qEAGA,+KAIA,4BACE,4BACE,kBAAC,IAAD,CAAS+B,GAAG,SAAZ,SAEF,4BACE,kBAAC,IAAD,CAASA,GAAG,mBAAZ,qCAIF,4BACE,kBAAC,IAAD,CAASA,GAAG,qBAAZ,uCAIF,4BACE,kBAAC,IAAD,CAASA,GAAG,qBAAZ,wCAMJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,QAAQC,UAAWJ,IAC/B,kBAAC,IAAD,CAAOG,KAAK,kBAAkBE,OAAQ,kBAAM,kBAAC,EAAD,SAC5C,kBAAC,IAAD,CAAOF,KAAK,oBAAoBE,OAAQ,kBAAM,kBAAC,EAAD,SAC9C,kBAAC,IAAD,CAAOF,KAAK,oBAAoBE,OAAQ,kBAAM,kBAAC,EAAD,YCjFlCC,QACW,cAA7BjC,OAAOkC,SAASC,UAEe,UAA7BnC,OAAOkC,SAASC,UAEhBnC,OAAOkC,SAASC,SAASC,MACvB,2DCZNC,IAASL,OAAO,kBAAC,EAAD,MAAS5B,SAASE,eAAe,SD6H3C,kBAAmBgC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8402f20a.chunk.js","sourcesContent":["import React from 'react';\n\nclass MicroFrontend extends React.Component {\n  componentDidMount() {\n    const { name, host, document } = this.props;\n    const scriptId = `micro-frontend-script-${name}`;\n\n    if (document.getElementById(scriptId)) {\n      this.renderMicroFrontend();\n      return;\n    }\n\n    fetch(`${host}/asset-manifest.json`)\n      .then(res => res.json())\n      .then(manifest => {\n        const script = document.createElement('script');\n        script.id = scriptId;\n        script.crossOrigin = '';\n        script.src = `${host}${manifest['files']['main.js']}`;\n        script.onload = this.renderMicroFrontend;\n        document.head.appendChild(script);\n      });\n  }\n\n  componentWillUnmount() {\n    const { name, window } = this.props;\n\n    window[`unmount${name}`] && window[`unmount${name}`](`${name}-container`);\n  }\n\n  renderMicroFrontend = () => {\n    const { name, window, history } = this.props;\n\n    window[`render${name}`] && window[`render${name}`](`${name}-container`, history);\n  };\n\n  render() {\n    return <main id={`${this.props.name}-container`} />;\n  }\n}\n\nMicroFrontend.defaultProps = {\n  document,\n  window,\n};\n\nexport default MicroFrontend;","import React from 'react';\nimport { NavLink, BrowserRouter, Route, Switch } from 'react-router-dom';\nimport MicroFrontend from './MicroFrontend';\n\nconst { REACT_APP_CREATEREACTAPP_HOST: createreactappHost } = process.env;\nconst { REACT_APP_MICROFRONTEND_2: createreactappHost2 } = process.env;\nconst { REACT_APP_MICROFRONTEND_3: createreactappHost3 } = process.env;\n\nconst CreateReactApp = ({ history }) => (\n  <MicroFrontend\n    history={history}\n    host={createreactappHost}\n    name=\"createreactapp\"\n  />\n);\n\nconst MicroFrontend2 = ({ history }) => (\n  <MicroFrontend\n    history={history}\n    host={createreactappHost2}\n    name=\"createreactapp2\"\n  />\n);\n\nconst MicroFrontend3 = ({ history }) => (\n  <MicroFrontend\n    history={history}\n    host={createreactappHost3}\n    name=\"createreactapp3\"\n  />\n);\n\nconst Home = () => (\n  <>\n    <p>\n      What is a micro front-ends approach? The term micro front-ends first came\n      up in the ThoughtWorks Technology Radar in November 2016. It extends the\n      concepts of microservices to front-end development.\n    </p>\n    <p>\n      The approach is to split the browser-based code into micro front-ends by\n      breaking down application features. By making smaller and feature-centered\n      codebases, we achieve the software development goal of decoupling.\n    </p>\n    <p>\n      Although the codebases are decoupled, the user experiences are coherent.\n      In addition, each codebase can be implemented, upgraded, updated, and\n      deployed independently.\n    </p>\n    <p>\n      Here is the paradise of micro front-ends. JavaScript applications,\n      regardless of frameworks and versions, are launched by a container. These\n      applications, legacy and new, work together seamlessly, and act like one\n      application.\n    </p>\n  </>\n);\n\nconst App = props => {\n  return (\n    <BrowserRouter>\n      <h1>\n        This is an example of micro frontend. \n      </h1>\n      <p>\n        In the links below, Home is a component bundled with the App Container,\n        and Micro Frontend is a micro frontend app loaded from an outside route.\n      </p>\n      <ul>\n        <li>\n          <NavLink to=\"/home\">Home</NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/createreactapp\">\n            Micro Frontend: Create React App\n          </NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/micro-frontend-2\">\n            Micro Frontend 2: Create React App\n          </NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/micro-frontend-3\">\n            Micro Frontend 3: Create React App\n          </NavLink>\n        </li>\n      </ul>\n\n      <Switch>\n        <Route path=\"/home\" component={Home} />\n        <Route path=\"/createreactapp\" render={() => <CreateReactApp />} />\n        <Route path=\"/micro-frontend-2\" render={() => <MicroFrontend2 />} />\n        <Route path=\"/micro-frontend-3\" render={() => <MicroFrontend3 />} />\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}